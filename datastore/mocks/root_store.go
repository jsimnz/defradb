// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	corekv "github.com/sourcenetwork/corekv"

	mock "github.com/stretchr/testify/mock"
)

// RootStore is an autogenerated mock type for the RootStore type
type RootStore struct {
	mock.Mock
}

type RootStore_Expecter struct {
	mock *mock.Mock
}

func (_m *RootStore) EXPECT() *RootStore_Expecter {
	return &RootStore_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *RootStore) Close() {
	_m.Called()
}

// RootStore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type RootStore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *RootStore_Expecter) Close() *RootStore_Close_Call {
	return &RootStore_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *RootStore_Close_Call) Run(run func()) *RootStore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RootStore_Close_Call) Return() *RootStore_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *RootStore_Close_Call) RunAndReturn(run func()) *RootStore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, key
func (_m *RootStore) Delete(ctx context.Context, key []byte) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RootStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RootStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key []byte
func (_e *RootStore_Expecter) Delete(ctx interface{}, key interface{}) *RootStore_Delete_Call {
	return &RootStore_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *RootStore_Delete_Call) Run(run func(ctx context.Context, key []byte)) *RootStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *RootStore_Delete_Call) Return(_a0 error) *RootStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RootStore_Delete_Call) RunAndReturn(run func(context.Context, []byte) error) *RootStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *RootStore) Get(ctx context.Context, key []byte) ([]byte, error) {
	ret := _m.Called(ctx, key)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]byte, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RootStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RootStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key []byte
func (_e *RootStore_Expecter) Get(ctx interface{}, key interface{}) *RootStore_Get_Call {
	return &RootStore_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *RootStore_Get_Call) Run(run func(ctx context.Context, key []byte)) *RootStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *RootStore_Get_Call) Return(_a0 []byte, _a1 error) *RootStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RootStore_Get_Call) RunAndReturn(run func(context.Context, []byte) ([]byte, error)) *RootStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: ctx, key
func (_m *RootStore) Has(ctx context.Context, key []byte) (bool, error) {
	ret := _m.Called(ctx, key)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RootStore_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type RootStore_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - ctx context.Context
//   - key []byte
func (_e *RootStore_Expecter) Has(ctx interface{}, key interface{}) *RootStore_Has_Call {
	return &RootStore_Has_Call{Call: _e.mock.On("Has", ctx, key)}
}

func (_c *RootStore_Has_Call) Run(run func(ctx context.Context, key []byte)) *RootStore_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *RootStore_Has_Call) Return(_a0 bool, _a1 error) *RootStore_Has_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RootStore_Has_Call) RunAndReturn(run func(context.Context, []byte) (bool, error)) *RootStore_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Iterator provides a mock function with given fields: ctx, opts
func (_m *RootStore) Iterator(ctx context.Context, opts corekv.IterOptions) corekv.Iterator {
	ret := _m.Called(ctx, opts)

	var r0 corekv.Iterator
	if rf, ok := ret.Get(0).(func(context.Context, corekv.IterOptions) corekv.Iterator); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corekv.Iterator)
		}
	}

	return r0
}

// RootStore_Iterator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Iterator'
type RootStore_Iterator_Call struct {
	*mock.Call
}

// Iterator is a helper method to define mock.On call
//   - ctx context.Context
//   - opts corekv.IterOptions
func (_e *RootStore_Expecter) Iterator(ctx interface{}, opts interface{}) *RootStore_Iterator_Call {
	return &RootStore_Iterator_Call{Call: _e.mock.On("Iterator", ctx, opts)}
}

func (_c *RootStore_Iterator_Call) Run(run func(ctx context.Context, opts corekv.IterOptions)) *RootStore_Iterator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(corekv.IterOptions))
	})
	return _c
}

func (_c *RootStore_Iterator_Call) Return(_a0 corekv.Iterator) *RootStore_Iterator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RootStore_Iterator_Call) RunAndReturn(run func(context.Context, corekv.IterOptions) corekv.Iterator) *RootStore_Iterator_Call {
	_c.Call.Return(run)
	return _c
}

// NewBatch provides a mock function with given fields:
func (_m *RootStore) NewBatch() corekv.Batch {
	ret := _m.Called()

	var r0 corekv.Batch
	if rf, ok := ret.Get(0).(func() corekv.Batch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corekv.Batch)
		}
	}

	return r0
}

// RootStore_NewBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewBatch'
type RootStore_NewBatch_Call struct {
	*mock.Call
}

// NewBatch is a helper method to define mock.On call
func (_e *RootStore_Expecter) NewBatch() *RootStore_NewBatch_Call {
	return &RootStore_NewBatch_Call{Call: _e.mock.On("NewBatch")}
}

func (_c *RootStore_NewBatch_Call) Run(run func()) *RootStore_NewBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RootStore_NewBatch_Call) Return(_a0 corekv.Batch) *RootStore_NewBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RootStore_NewBatch_Call) RunAndReturn(run func() corekv.Batch) *RootStore_NewBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewTxn provides a mock function with given fields: readonly
func (_m *RootStore) NewTxn(readonly bool) corekv.Txn {
	ret := _m.Called(readonly)

	var r0 corekv.Txn
	if rf, ok := ret.Get(0).(func(bool) corekv.Txn); ok {
		r0 = rf(readonly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corekv.Txn)
		}
	}

	return r0
}

// RootStore_NewTxn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTxn'
type RootStore_NewTxn_Call struct {
	*mock.Call
}

// NewTxn is a helper method to define mock.On call
//   - readonly bool
func (_e *RootStore_Expecter) NewTxn(readonly interface{}) *RootStore_NewTxn_Call {
	return &RootStore_NewTxn_Call{Call: _e.mock.On("NewTxn", readonly)}
}

func (_c *RootStore_NewTxn_Call) Run(run func(readonly bool)) *RootStore_NewTxn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *RootStore_NewTxn_Call) Return(_a0 corekv.Txn) *RootStore_NewTxn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RootStore_NewTxn_Call) RunAndReturn(run func(bool) corekv.Txn) *RootStore_NewTxn_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value
func (_m *RootStore) Set(ctx context.Context, key []byte, value []byte) error {
	ret := _m.Called(ctx, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RootStore_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type RootStore_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key []byte
//   - value []byte
func (_e *RootStore_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *RootStore_Set_Call {
	return &RootStore_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *RootStore_Set_Call) Run(run func(ctx context.Context, key []byte, value []byte)) *RootStore_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *RootStore_Set_Call) Return(_a0 error) *RootStore_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RootStore_Set_Call) RunAndReturn(run func(context.Context, []byte, []byte) error) *RootStore_Set_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRootStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewRootStore creates a new instance of RootStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRootStore(t mockConstructorTestingTNewRootStore) *RootStore {
	mock := &RootStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
